//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace CommonLibrary.WsReport {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ReportSoap", Namespace="http://isocare.org/")]
    public partial class Report : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ReportPDFOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportPDF_PrintServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPDFURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunWithIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Report() {
            this.Url = global::CommonLibrary.Properties.Settings.Default.CommonLibrary_WsReport_Report;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ReportPDFCompletedEventHandler ReportPDFCompleted;
        
        /// <remarks/>
        public event ReportPDF_PrintServerCompletedEventHandler ReportPDF_PrintServerCompleted;
        
        /// <remarks/>
        public event GetPDFURLCompletedEventHandler GetPDFURLCompleted;
        
        /// <remarks/>
        public event GetReportDetailCompletedEventHandler GetReportDetailCompleted;
        
        /// <remarks/>
        public event RunCompletedEventHandler RunCompleted;
        
        /// <remarks/>
        public event RunWithIDCompletedEventHandler RunWithIDCompleted;
        
        /// <remarks/>
        public event GetStatusCompletedEventHandler GetStatusCompleted;
        
        /// <remarks/>
        public event StopCompletedEventHandler StopCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isocare.org/ReportPDF", RequestNamespace="http://isocare.org/", ResponseNamespace="http://isocare.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ReportPDF(string wsPass, string pkApplication, string pkGroupID, string pkReportID, string xmlCriteria, string pdfFileName) {
            object[] results = this.Invoke("ReportPDF", new object[] {
                        wsPass,
                        pkApplication,
                        pkGroupID,
                        pkReportID,
                        xmlCriteria,
                        pdfFileName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ReportPDFAsync(string wsPass, string pkApplication, string pkGroupID, string pkReportID, string xmlCriteria, string pdfFileName) {
            this.ReportPDFAsync(wsPass, pkApplication, pkGroupID, pkReportID, xmlCriteria, pdfFileName, null);
        }
        
        /// <remarks/>
        public void ReportPDFAsync(string wsPass, string pkApplication, string pkGroupID, string pkReportID, string xmlCriteria, string pdfFileName, object userState) {
            if ((this.ReportPDFOperationCompleted == null)) {
                this.ReportPDFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportPDFOperationCompleted);
            }
            this.InvokeAsync("ReportPDF", new object[] {
                        wsPass,
                        pkApplication,
                        pkGroupID,
                        pkReportID,
                        xmlCriteria,
                        pdfFileName}, this.ReportPDFOperationCompleted, userState);
        }
        
        private void OnReportPDFOperationCompleted(object arg) {
            if ((this.ReportPDFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportPDFCompleted(this, new ReportPDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isocare.org/ReportPDF_PrintServer", RequestNamespace="http://isocare.org/", ResponseNamespace="http://isocare.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ReportPDF_PrintServer(string wsPass, string pkApplication, string pkGroupID, string pkReportID, string xmlCriteria, string pdfFileName) {
            object[] results = this.Invoke("ReportPDF_PrintServer", new object[] {
                        wsPass,
                        pkApplication,
                        pkGroupID,
                        pkReportID,
                        xmlCriteria,
                        pdfFileName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ReportPDF_PrintServerAsync(string wsPass, string pkApplication, string pkGroupID, string pkReportID, string xmlCriteria, string pdfFileName) {
            this.ReportPDF_PrintServerAsync(wsPass, pkApplication, pkGroupID, pkReportID, xmlCriteria, pdfFileName, null);
        }
        
        /// <remarks/>
        public void ReportPDF_PrintServerAsync(string wsPass, string pkApplication, string pkGroupID, string pkReportID, string xmlCriteria, string pdfFileName, object userState) {
            if ((this.ReportPDF_PrintServerOperationCompleted == null)) {
                this.ReportPDF_PrintServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportPDF_PrintServerOperationCompleted);
            }
            this.InvokeAsync("ReportPDF_PrintServer", new object[] {
                        wsPass,
                        pkApplication,
                        pkGroupID,
                        pkReportID,
                        xmlCriteria,
                        pdfFileName}, this.ReportPDF_PrintServerOperationCompleted, userState);
        }
        
        private void OnReportPDF_PrintServerOperationCompleted(object arg) {
            if ((this.ReportPDF_PrintServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportPDF_PrintServerCompleted(this, new ReportPDF_PrintServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isocare.org/GetPDFURL", RequestNamespace="http://isocare.org/", ResponseNamespace="http://isocare.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPDFURL(string wsPass) {
            object[] results = this.Invoke("GetPDFURL", new object[] {
                        wsPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPDFURLAsync(string wsPass) {
            this.GetPDFURLAsync(wsPass, null);
        }
        
        /// <remarks/>
        public void GetPDFURLAsync(string wsPass, object userState) {
            if ((this.GetPDFURLOperationCompleted == null)) {
                this.GetPDFURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPDFURLOperationCompleted);
            }
            this.InvokeAsync("GetPDFURL", new object[] {
                        wsPass}, this.GetPDFURLOperationCompleted, userState);
        }
        
        private void OnGetPDFURLOperationCompleted(object arg) {
            if ((this.GetPDFURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPDFURLCompleted(this, new GetPDFURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isocare.org/GetReportDetail", RequestNamespace="http://isocare.org/", ResponseNamespace="http://isocare.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public str_webreportdetail GetReportDetail(string wsPass, string pkApplication, string pkGroupID, string pkReportID) {
            object[] results = this.Invoke("GetReportDetail", new object[] {
                        wsPass,
                        pkApplication,
                        pkGroupID,
                        pkReportID});
            return ((str_webreportdetail)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportDetailAsync(string wsPass, string pkApplication, string pkGroupID, string pkReportID) {
            this.GetReportDetailAsync(wsPass, pkApplication, pkGroupID, pkReportID, null);
        }
        
        /// <remarks/>
        public void GetReportDetailAsync(string wsPass, string pkApplication, string pkGroupID, string pkReportID, object userState) {
            if ((this.GetReportDetailOperationCompleted == null)) {
                this.GetReportDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportDetailOperationCompleted);
            }
            this.InvokeAsync("GetReportDetail", new object[] {
                        wsPass,
                        pkApplication,
                        pkGroupID,
                        pkReportID}, this.GetReportDetailOperationCompleted, userState);
        }
        
        private void OnGetReportDetailOperationCompleted(object arg) {
            if ((this.GetReportDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportDetailCompleted(this, new GetReportDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isocare.org/Run", RequestNamespace="http://isocare.org/", ResponseNamespace="http://isocare.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Run(string wsPass, string pkApplication, string SessionID, string pkGroupID, string pkReportID, string xmlCriteria, string pdfFileName) {
            object[] results = this.Invoke("Run", new object[] {
                        wsPass,
                        pkApplication,
                        SessionID,
                        pkGroupID,
                        pkReportID,
                        xmlCriteria,
                        pdfFileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunAsync(string wsPass, string pkApplication, string SessionID, string pkGroupID, string pkReportID, string xmlCriteria, string pdfFileName) {
            this.RunAsync(wsPass, pkApplication, SessionID, pkGroupID, pkReportID, xmlCriteria, pdfFileName, null);
        }
        
        /// <remarks/>
        public void RunAsync(string wsPass, string pkApplication, string SessionID, string pkGroupID, string pkReportID, string xmlCriteria, string pdfFileName, object userState) {
            if ((this.RunOperationCompleted == null)) {
                this.RunOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunOperationCompleted);
            }
            this.InvokeAsync("Run", new object[] {
                        wsPass,
                        pkApplication,
                        SessionID,
                        pkGroupID,
                        pkReportID,
                        xmlCriteria,
                        pdfFileName}, this.RunOperationCompleted, userState);
        }
        
        private void OnRunOperationCompleted(object arg) {
            if ((this.RunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunCompleted(this, new RunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isocare.org/RunWithID", RequestNamespace="http://isocare.org/", ResponseNamespace="http://isocare.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunWithID(string wsPass, string pkApplication, string SessionID, string pkGroupID, string pkReportID, string userID, string xmlCriteria, string pdfFileName) {
            object[] results = this.Invoke("RunWithID", new object[] {
                        wsPass,
                        pkApplication,
                        SessionID,
                        pkGroupID,
                        pkReportID,
                        userID,
                        xmlCriteria,
                        pdfFileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunWithIDAsync(string wsPass, string pkApplication, string SessionID, string pkGroupID, string pkReportID, string userID, string xmlCriteria, string pdfFileName) {
            this.RunWithIDAsync(wsPass, pkApplication, SessionID, pkGroupID, pkReportID, userID, xmlCriteria, pdfFileName, null);
        }
        
        /// <remarks/>
        public void RunWithIDAsync(string wsPass, string pkApplication, string SessionID, string pkGroupID, string pkReportID, string userID, string xmlCriteria, string pdfFileName, object userState) {
            if ((this.RunWithIDOperationCompleted == null)) {
                this.RunWithIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunWithIDOperationCompleted);
            }
            this.InvokeAsync("RunWithID", new object[] {
                        wsPass,
                        pkApplication,
                        SessionID,
                        pkGroupID,
                        pkReportID,
                        userID,
                        xmlCriteria,
                        pdfFileName}, this.RunWithIDOperationCompleted, userState);
        }
        
        private void OnRunWithIDOperationCompleted(object arg) {
            if ((this.RunWithIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunWithIDCompleted(this, new RunWithIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isocare.org/GetStatus", RequestNamespace="http://isocare.org/", ResponseNamespace="http://isocare.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStatus(string wspass, string pkApplication, string SessionID, string pkGroupID, string pkReportID) {
            object[] results = this.Invoke("GetStatus", new object[] {
                        wspass,
                        pkApplication,
                        SessionID,
                        pkGroupID,
                        pkReportID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatusAsync(string wspass, string pkApplication, string SessionID, string pkGroupID, string pkReportID) {
            this.GetStatusAsync(wspass, pkApplication, SessionID, pkGroupID, pkReportID, null);
        }
        
        /// <remarks/>
        public void GetStatusAsync(string wspass, string pkApplication, string SessionID, string pkGroupID, string pkReportID, object userState) {
            if ((this.GetStatusOperationCompleted == null)) {
                this.GetStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatusOperationCompleted);
            }
            this.InvokeAsync("GetStatus", new object[] {
                        wspass,
                        pkApplication,
                        SessionID,
                        pkGroupID,
                        pkReportID}, this.GetStatusOperationCompleted, userState);
        }
        
        private void OnGetStatusOperationCompleted(object arg) {
            if ((this.GetStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatusCompleted(this, new GetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://isocare.org/Stop", RequestNamespace="http://isocare.org/", ResponseNamespace="http://isocare.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Stop(string wsPass, string pkApplication, string SessionID, string pkGroupID, string pkReportID) {
            object[] results = this.Invoke("Stop", new object[] {
                        wsPass,
                        pkApplication,
                        SessionID,
                        pkGroupID,
                        pkReportID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StopAsync(string wsPass, string pkApplication, string SessionID, string pkGroupID, string pkReportID) {
            this.StopAsync(wsPass, pkApplication, SessionID, pkGroupID, pkReportID, null);
        }
        
        /// <remarks/>
        public void StopAsync(string wsPass, string pkApplication, string SessionID, string pkGroupID, string pkReportID, object userState) {
            if ((this.StopOperationCompleted == null)) {
                this.StopOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopOperationCompleted);
            }
            this.InvokeAsync("Stop", new object[] {
                        wsPass,
                        pkApplication,
                        SessionID,
                        pkGroupID,
                        pkReportID}, this.StopOperationCompleted, userState);
        }
        
        private void OnStopOperationCompleted(object arg) {
            if ((this.StopCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopCompleted(this, new StopCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://isocare.org/")]
    public partial class str_webreportdetail {
        
        private string applicationField;
        
        private string group_idField;
        
        private string report_idField;
        
        private string report_nameField;
        
        private string report_dwobjectField;
        
        private string report_criobjectField;
        
        private string report_creobjectField;
        
        private string report_commentField;
        
        private short used_flagField;
        
        /// <remarks/>
        public string application {
            get {
                return this.applicationField;
            }
            set {
                this.applicationField = value;
            }
        }
        
        /// <remarks/>
        public string group_id {
            get {
                return this.group_idField;
            }
            set {
                this.group_idField = value;
            }
        }
        
        /// <remarks/>
        public string report_id {
            get {
                return this.report_idField;
            }
            set {
                this.report_idField = value;
            }
        }
        
        /// <remarks/>
        public string report_name {
            get {
                return this.report_nameField;
            }
            set {
                this.report_nameField = value;
            }
        }
        
        /// <remarks/>
        public string report_dwobject {
            get {
                return this.report_dwobjectField;
            }
            set {
                this.report_dwobjectField = value;
            }
        }
        
        /// <remarks/>
        public string report_criobject {
            get {
                return this.report_criobjectField;
            }
            set {
                this.report_criobjectField = value;
            }
        }
        
        /// <remarks/>
        public string report_creobject {
            get {
                return this.report_creobjectField;
            }
            set {
                this.report_creobjectField = value;
            }
        }
        
        /// <remarks/>
        public string report_comment {
            get {
                return this.report_commentField;
            }
            set {
                this.report_commentField = value;
            }
        }
        
        /// <remarks/>
        public short used_flag {
            get {
                return this.used_flagField;
            }
            set {
                this.used_flagField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReportPDFCompletedEventHandler(object sender, ReportPDFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportPDFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportPDFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReportPDF_PrintServerCompletedEventHandler(object sender, ReportPDF_PrintServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportPDF_PrintServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportPDF_PrintServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPDFURLCompletedEventHandler(object sender, GetPDFURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPDFURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPDFURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetReportDetailCompletedEventHandler(object sender, GetReportDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public str_webreportdetail Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((str_webreportdetail)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RunCompletedEventHandler(object sender, RunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RunWithIDCompletedEventHandler(object sender, RunWithIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunWithIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunWithIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetStatusCompletedEventHandler(object sender, GetStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void StopCompletedEventHandler(object sender, StopCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StopCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591